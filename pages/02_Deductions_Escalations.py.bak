import streamlit as st
import pandas as pd

# --- THEME AND SIDEBAR LOGIC ---
THEMES = {
    "Default": {
        "primary_color": "#1E88E5",
        "background_color": "#FFFFFF",
        "text_color": "#424242",
        "accent_color": "#FFC107",
        "secondary_color": "#4CAF50",
        "font": "sans-serif"
    },
    "Dark": {
        "primary_color": "#2962FF",
        "background_color": "#121212",
        "text_color": "#E0E0E0",
        "accent_color": "#FF6D00",
        "secondary_color": "#00C853",
        "font": "sans-serif"
    },
    "Corporate": {
        "primary_color": "#0D47A1",
        "background_color": "#F5F5F5",
        "text_color": "#212121",
        "accent_color": "#E65100",
        "secondary_color": "#2E7D32",
        "font": "serif"
    }
}

def apply_theme(theme_name):
    if theme_name not in THEMES:
        theme_name = "Default"
    theme = THEMES[theme_name]
    st.markdown(f"""
    <style>
        .stApp {{ background-color: {theme["background_color"]}; color: {theme["text_color"]}; font-family: {theme["font"]}; }}
        h1, h2, h3, h4, h5, h6 {{ color: {theme["primary_color"]}; font-family: {theme["font"]}; }}
        .main-title {{ color: {theme["primary_color"]}; font-size: 2.5rem; font-weight: 700; margin-bottom: 1.5rem; text-align: center; padding: 1.2rem; border-bottom: 2px solid {theme["accent_color"]}; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); background: linear-gradient(to right, {theme["primary_color"]}15, {theme["accent_color"]}15); border-radius: 8px; }}
        .sub-title {{ color: {theme["primary_color"]}; font-size: 1.5rem; font-weight: 600; margin-top: 1.2rem; margin-bottom: 0.8rem; padding-bottom: 0.5rem; border-bottom: 1px solid {theme["accent_color"]}40; display: flex; align-items: center; }}
        .dashboard-section {{ background-color: white; border-radius: 10px; padding: 1.5rem; margin-bottom: 1.5rem; box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05); }}
        .upload-container {{ border: 2px dashed {theme["accent_color"]}50; border-radius: 10px; padding: 2rem; text-align: center; background-color: {theme["accent_color"]}10; transition: all 0.3s ease; }}
        .upload-container:hover {{ border-color: {theme["accent_color"]}; background-color: {theme["accent_color"]}15; }}
        .welcome-header {{ font-size: 1.2rem; font-weight: 600; color: {theme["primary_color"]}; margin-bottom: 1rem; padding-bottom: 0.5rem; border-bottom: 1px solid {theme["accent_color"]}; }}
    </style>
    """, unsafe_allow_html=True)

# Initialize theme in session state
if 'theme' not in st.session_state:
    st.session_state['theme'] = "Default"

# Check authentication
if "authenticated" not in st.session_state or not st.session_state["authenticated"]:
    st.warning("Please log in from the Home page to access this dashboard.")
    st.stop()

# Setup sidebar
with st.sidebar:
    with st.expander("Debug Info", expanded=False):
        if 'debug_messages' in st.session_state:
            for msg in st.session_state.debug_messages[-10:]:
                st.text(msg)
        else:
            st.text("No debug messages yet")
    st.markdown(f"<div class='welcome-header'>Welcome, {st.session_state.get('username', 'User')}</div>", unsafe_allow_html=True)
    st.markdown("---")

# Apply current theme
apply_theme(st.session_state['theme'])

# Debug print helper
def debug_print(message):
    print(f"[DEBUG] {message}")
    if 'debug_messages' not in st.session_state:
        st.session_state.debug_messages = []
    st.session_state.debug_messages.append(str(message))
    if len(st.session_state.debug_messages) > 20:
        st.session_state.debug_messages = st.session_state.debug_messages[-20:]

# Helper function to safely convert series to numeric
def convert_to_numeric(series):
    try:
        # Remove any currency symbols and commas
        if series.dtype == 'object':
            series = series.str.replace('$', '').str.replace(',', '')
        return pd.to_numeric(series, errors='coerce')
    except Exception as e:
        debug_print(f"Error converting to numeric: {str(e)}")
        return pd.Series([None] * len(series))

# File processing
def process_uploaded_file(uploaded_file):
    try:
        if uploaded_file.name.endswith(('.xlsx', '.xls')):
            df = pd.read_excel(uploaded_file)
        else:
            df = pd.read_csv(uploaded_file)
        debug_print(f"File '{uploaded_file.name}' read successfully. Shape: {df.shape}")
        return df
    except Exception as e:
        st.error(f"Error processing file: {str(e)}")
        debug_print(f"Error processing file: {str(e)}")
        return None

def main():
    st.markdown("<h1 class='main-title'>ðŸ“Š Deductions Escalations Dashboard</h1>", unsafe_allow_html=True)
    st.markdown("<div class='dashboard-section'><h3 class='sub-title'>ðŸ“¤ Upload Deductions Report</h3><div class='upload-container'>", unsafe_allow_html=True)
    uploaded_file = st.file_uploader(
        "Upload your deductions report (Excel or CSV)",
        type=['xlsx', 'xls', 'csv'],
        key="deductions_uploader_unique_key"
    )

    if uploaded_file is not None:
        if (
            'last_uploaded_filename' not in st.session_state or
            st.session_state['last_uploaded_filename'] != uploaded_file.name
        ):
            debug_print(f"Processing new file: {uploaded_file.name}")
            df = process_uploaded_file(uploaded_file)
            st.session_state['deductions_df'] = df
            st.session_state['last_uploaded_filename'] = uploaded_file.name
        else:
            debug_print(f"Using cached DataFrame for: {uploaded_file.name}")
        df = st.session_state['deductions_df']
        if df is not None:
            st.markdown("</div></div>", unsafe_allow_html=True)
            st.markdown("<div class='dashboard-section'><h3 class='sub-title'>ðŸ“‹ Raw Data Preview</h3>", unsafe_allow_html=True)
            st.dataframe(df)
    else:
        st.session_state['deductions_df'] = None
        st.session_state['last_uploaded_filename'] = None

if __name__ == "__main__":
    main()
