import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import datetime
import numpy as np
import os
import json

# File to store credentials (should be shared with main app)
CREDENTIALS_FILE = "credentials.json"

# Load credentials
def load_credentials():
    if os.path.exists(CREDENTIALS_FILE):
        try:
            with open(CREDENTIALS_FILE, "r") as file:
                data = json.load(file)
                if "admin" in data and "DMAT" in data:
                    return data
        except json.JSONDecodeError:
            pass

    default_creds = {
        "admin": {"username": "admin", "password": "dmat123461"},
        "DMAT": {"username": "DMAT", "password": "payactiv123461"}
    }
    save_credentials(default_creds)
    return default_creds

# Save credentials
def save_credentials(credentials):
    with open(CREDENTIALS_FILE, "w") as file:
        json.dump(credentials, file, indent=4)

# Initialize authentication
credentials = load_credentials()

# Define themes
THEMES = {
    "Default": {
        "primary_color": "#1E88E5",
        "background_color": "#FFFFFF",
        "text_color": "#424242",
        "accent_color": "#FFC107",
        "secondary_color": "#4CAF50",
        "font": "sans-serif"
    },
    "Dark": {
        "primary_color": "#2962FF",
        "background_color": "#121212",
        "text_color": "#E0E0E0",
        "accent_color": "#FF6D00",
        "secondary_color": "#00C853",
        "font": "sans-serif"
    },
    "Corporate": {
        "primary_color": "#0D47A1",
        "background_color": "#F5F5F5",
        "text_color": "#212121",
        "accent_color": "#E65100",
        "secondary_color": "#2E7D32",
        "font": "serif"
    }
}

# Apply theme
def apply_theme(theme_name):
    if theme_name not in THEMES:
        theme_name = "Default"
    
    theme = THEMES[theme_name]
    
    # Apply CSS with the selected theme
    st.markdown(f"""
    <style>
        /* Global Styles */
        .stApp {{
            background-color: {theme["background_color"]};
            color: {theme["text_color"]};
            font-family: {theme["font"]};
        }}
        
        /* Headers */
        h1, h2, h3, h4, h5, h6 {{
            color: {theme["primary_color"]};
            font-family: {theme["font"]};
        }}
        
        /* Main title */
        .main-title {{
            color: {theme["primary_color"]};
            font-size: 2.5rem;
            font-weight: 700;
            margin-bottom: 1rem;
            text-align: center;
            padding: 1rem;
            border-bottom: 2px solid {theme["accent_color"]};
        }}
        
        /* Sub titles */
        .sub-title {{
            color: {theme["primary_color"]};
            font-size: 1.5rem;
            font-weight: 600;
            margin-top: 1rem;
            margin-bottom: 0.5rem;
            padding-bottom: 0.3rem;
            border-bottom: 1px solid {theme["accent_color"]}40;
        }}
        
        /* Metrics */
        .metric-card {{
            background-color: {theme["primary_color"]}15;
            border-radius: 10px;
            padding: 1rem;
            box-shadow: 0 4px 6px {theme["primary_color"]}20;
            text-align: center;
            margin-bottom: 1rem;
        }}
        
        .metric-value {{
            font-size: 2rem;
            font-weight: 700;
            color: {theme["primary_color"]};
        }}
        
        .metric-label {{
            font-size: 1rem;
            color: {theme["text_color"]};
            margin-top: 0.5rem;
        }}
        
        /* Buttons */
        .stButton button {{
            background-color: {theme["primary_color"]};
            color: white;
            border: none;
            border-radius: 5px;
            padding: 0.5rem 1rem;
            font-weight: 600;
            transition: all 0.3s ease;
        }}
        
        .stButton button:hover {{
            background-color: {theme["accent_color"]};
            color: {theme["background_color"]};
        }}
        
        /* Sidebar */
        .css-1d391kg {{
            background-color: {theme["primary_color"]}15;
        }}
        
        /* Tabs */
        .stTabs [data-baseweb="tab-list"] {{
            gap: 1rem;
        }}
        
        .stTabs [data-baseweb="tab"] {{
            background-color: {theme["background_color"]};
            color: {theme["text_color"]};
            border-radius: 5px 5px 0 0;
            padding: 0.5rem 1rem;
            border: 1px solid {theme["primary_color"]}30;
            border-bottom: none;
        }}
        
        .stTabs [aria-selected="true"] {{
            background-color: {theme["primary_color"]}20;
            color: {theme["primary_color"]};
            font-weight: bold;
            border-top: 2px solid {theme["primary_color"]};
        }}
    </style>
    """, unsafe_allow_html=True)

# Set page config
st.set_page_config(layout="wide", page_title="DMAT - Deductions Escalations", page_icon="ðŸ“Š")

# Create session state for user preferences if not exists
if 'theme' not in st.session_state:
    st.session_state['theme'] = "Default"

# Apply the current theme
apply_theme(st.session_state['theme'])

# Title and description
st.markdown("<h1 class='main-title'>Deductions Escalations Dashboard</h1>", unsafe_allow_html=True)
st.markdown("Upload and analyze Deductions Escalations data")

# Theme selector in sidebar
with st.sidebar:
    st.title("Settings")
    selected_theme = st.selectbox(
        "Select Theme",
        options=list(THEMES.keys()),
        index=list(THEMES.keys()).index(st.session_state['theme'])
    )
    
    if selected_theme != st.session_state['theme']:
        st.session_state['theme'] = selected_theme
        apply_theme(selected_theme)
        st.rerun()

# File uploader
uploaded_file = st.file_uploader("Upload Deductions Escalations Report", 
                                type=["csv", "xlsx", "xls"], 
                                help="Upload a CSV or Excel file with deductions escalation data")

# Process the uploaded file
if uploaded_file is not None:
    try:
        # Determine file type and read accordingly
        if uploaded_file.name.endswith('.csv'):
            df = pd.read_csv(uploaded_file)
        else:
            df = pd.read_excel(uploaded_file)
        
        # Check if the required columns are present
        required_columns = [
            "Environment", "Deduction Submission Date", "BranchID", "Employer", 
            "DepartmentName", "Pay Day", "Provider", "Method", "Transactions", 
            "Amount", "Failed Amount", "Failed Department", "Status", 
            "Escalated To", "Successful via Automation", "Reason", "Remarks", 
            "Mode", "Task Link / Email Subject"
        ]
        
        # Check if all required columns exist
        missing_columns = [col for col in required_columns if col not in df.columns]
        
        if missing_columns:
            st.error(f"The following required columns are missing: {', '.join(missing_columns)}")
        else:
            # Convert date columns to datetime
            date_columns = ["Deduction Submission Date", "Pay Day"]
            for col in date_columns:
                if col in df.columns:
                    df[col] = pd.to_datetime(df[col], errors='coerce')
            
            # Convert numeric columns
            numeric_columns = ["Transactions", "Amount", "Failed Amount"]
            for col in numeric_columns:
                if col in df.columns:
                    df[col] = pd.to_numeric(df[col], errors='coerce')
            
            # Display success message
            st.success(f"Successfully loaded data with {len(df)} records")
            
            # Create tabs for different views
            tab1, tab2, tab3, tab4 = st.tabs(["Overview", "Detailed Analysis", "Data Explorer", "Insights"])
            
            with tab1:  # Overview Tab
                st.markdown("<h2 class='sub-title'>Deductions Overview</h2>", unsafe_allow_html=True)
                
                # Create metrics row
                col1, col2, col3, col4 = st.columns(4)
                
                with col1:
                    total_deductions = df["Amount"].sum()
                    st.metric("Total Deduction Amount", f"${total_deductions:,.2f}")
                
                with col2:
                    failed_amount = df["Failed Amount"].sum()
                    failure_rate = (failed_amount / total_deductions) * 100 if total_deductions > 0 else 0
                    st.metric("Failed Amount", f"${failed_amount:,.2f}", f"{failure_rate:.1f}%")
                
                with col3:
                    total_transactions = df["Transactions"].sum()
                    st.metric("Total Transactions", f"{total_transactions:,}")
                
                with col4:
                    # Convert to string first to handle various data types
                    df["Successful via Automation"] = df["Successful via Automation"].astype(str)
                    success_rate = df["Successful via Automation"].str.lower().isin(["yes", "true", "y", "1"]).mean() * 100
                    st.metric("Automation Success Rate", f"{success_rate:.1f}%")
                
                # Charts
                col1, col2 = st.columns(2)
                
                with col1:
                    st.markdown("<h3 class='sub-title'>Deduction Status Distribution</h3>", unsafe_allow_html=True)
                    status_counts = df["Status"].value_counts().reset_index()
                    status_counts.columns = ["Status", "Count"]
                    
                    fig_status = px.pie(
                        status_counts, 
                        values="Count", 
                        names="Status", 
                        title="",
                        hole=0.4,
                        color_discrete_sequence=px.colors.qualitative.Set3
                    )
                    fig_status.update_traces(textposition='inside', textinfo='percent+label')
                    st.plotly_chart(fig_status, use_container_width=True)
                
                with col2:
                    st.markdown("<h3 class='sub-title'>Deduction Methods</h3>", unsafe_allow_html=True)
                    
                    method_data = df.groupby("Method")["Amount"].sum().reset_index()
                    
                    fig_method = px.pie(
                        method_data,
                        values="Amount",
                        names="Method",
                        title="",
                        color_discrete_sequence=px.colors.qualitative.Pastel
                    )
                    fig_method.update_traces(textposition='inside', textinfo='percent+label')
                    st.plotly_chart(fig_method, use_container_width=True)
                
                # Time series of deductions
                st.markdown("<h3 class='sub-title'>Deduction Trends Over Time</h3>", unsafe_allow_html=True)
                
                # Group by submission date
                time_series = df.groupby(df["Deduction Submission Date"].dt.date)["Amount"].sum().reset_index()
                time_series.columns = ["Date", "Amount"]
                
                fig_time = px.line(
                    time_series, 
                    x="Date", 
                    y="Amount", 
                    title="",
                    markers=True,
                    color_discrete_sequence=[THEMES[st.session_state['theme']]["primary_color"]]
                )
                fig_time.update_layout(
                    xaxis_title="Date",
                    yaxis_title="Amount ($)",
                    hovermode="x unified"
                )
                st.plotly_chart(fig_time, use_container_width=True)
                
                # Provider distribution
                st.markdown("<h3 class='sub-title'>Deductions by Provider</h3>", unsafe_allow_html=True)
                provider_data = df.groupby("Provider")["Amount"].sum().reset_index().sort_values("Amount", ascending=False)
                
                fig_provider = px.bar(
                    provider_data,
                    x="Provider",
                    y="Amount",
                    title="",
                    color="Amount",
                    color_continuous_scale=px.colors.sequential.Blues
                )
                fig_provider.update_layout(
                    xaxis_title="Provider",
                    yaxis_title="Amount ($)",
                    coloraxis_showscale=True
                )
                st.plotly_chart(fig_provider, use_container_width=True)
            
            with tab2:  # Detailed Analysis Tab
                st.markdown("<h2 class='sub-title'>Detailed Analysis</h2>", unsafe_allow_html=True)
                
                # Filters
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    selected_environment = st.multiselect(
                        "Environment", 
                        options=sorted(df["Environment"].unique()),
                        default=sorted(df["Environment"].unique())
                    )
                
                with col2:
                    selected_status = st.multiselect(
                        "Status", 
                        options=sorted(df["Status"].unique()),
                        default=sorted(df["Status"].unique())
                    )
                
                with col3:
                    selected_provider = st.multiselect(
                        "Provider", 
                        options=sorted(df["Provider"].unique()),
                        default=sorted(df["Provider"].unique())
                    )
                
                # Date range filter
                date_min = df["Deduction Submission Date"].min().date()
                date_max = df["Deduction Submission Date"].max().date()
                
                selected_date_range = st.date_input(
                    "Date Range",
                    value=(date_min, date_max),
                    min_value=date_min,
                    max_value=date_max
                )
                
                # Ensure we have a start and end date
                if len(selected_date_range) == 2:
                    start_date, end_date = selected_date_range
                    
                    # Filter data based on all selections
                    filtered_df = df[
                        (df["Environment"].isin(selected_environment)) &
                        (df["Status"].isin(selected_status)) &
                        (df["Provider"].isin(selected_provider)) &
                        (df["Deduction Submission Date"].dt.date >= start_date) &
                        (df["Deduction Submission Date"].dt.date <= end_date)
                    ]
                    
                    # Show filtered data count
                    st.markdown(f"### Showing {len(filtered_df)} records")
                    
                    if not filtered_df.empty:
                        # Failure analysis
                        st.markdown("<h3 class='sub-title'>Failure Analysis</h3>", unsafe_allow_html=True)
                        
                        # Reasons for failure
                        reason_counts = filtered_df["Reason"].value_counts().reset_index()
                        reason_counts.columns = ["Reason", "Count"]
                        
                        if not reason_counts.empty:
                            fig_reasons = px.bar(
                                reason_counts.head(10),
                                x="Count",
                                y="Reason",
                                title="Top 10 Failure Reasons",
                                orientation='h',
                                color="Count",
                                color_continuous_scale=px.colors.sequential.Reds
                            )
                            fig_reasons.update_layout(yaxis={'categoryorder':'total ascending'})
                            st.plotly_chart(fig_reasons, use_container_width=True)
                        else:
                            st.info("No failure reasons found in the filtered data.")
                        
                        # Employer analysis
                        st.markdown("<h3 class='sub-title'>Top Employers</h3>", unsafe_allow_html=True)
                        
                        employer_data = filtered_df.groupby("Employer")["Amount"].sum().reset_index().sort_values("Amount", ascending=False).head(10)
                        
                        if not employer_data.empty:
                            fig_employer = px.bar(
                                employer_data,
                                x="Employer",
                                y="Amount",
                                title="Top 10 Employers by Deduction Amount",
                                color="Amount",
                                color_continuous_scale=px.colors.sequential.Greens
                            )
                            st.plotly_chart(fig_employer, use_container_width=True)
                        else:
                            st.info("No employer data found in the filtered selection.")
                        
                        # Mode analysis
                        st.markdown("<h3 class='sub-title'>Deduction Modes</h3>", unsafe_allow_html=True)
                        
                        mode_data = filtered_df.groupby("Mode")[["Amount", "Failed Amount"]].sum().reset_index()
                        
                        if not mode_data.empty:
                            # Calculate success amount
                            mode_data["Success Amount"] = mode_data["Amount"] - mode_data["Failed Amount"]
                            
                            # Melt the dataframe for stacked bar chart
                            mode_melted = pd.melt(
                                mode_data,
                                id_vars=["Mode"],
                                value_vars=["Success Amount", "Failed Amount"],
                                var_name="Status",
                                value_name="Amount_Value"
                            )
                            
                            fig_mode = px.bar(
                                mode_melted,
                                x="Mode",
                                y="Amount_Value",
                                color="Status",
                                title="Deduction Amount by Mode and Status",
                                barmode="stack",
                                color_discrete_map={
                                    "Success Amount": "#4CAF50",
                                    "Failed Amount": "#F44336"
                                }
                            )
                            st.plotly_chart(fig_mode, use_container_width=True)
                        else:
                            st.info("No mode data found in the filtered selection.")
                    else:
                        st.warning("No data matches your filter criteria. Please adjust your filters.")
                else:
                    st.warning("Please select both start and end dates.")
            
            with tab3:  # Data Explorer Tab
                st.markdown("<h2 class='sub-title'>Data Explorer</h2>", unsafe_allow_html=True)
                
                # Column selector
                selected_columns = st.multiselect(
                    "Select columns to display",
                    options=df.columns.tolist(),
                    default=["Environment", "Deduction Submission Date", "Employer", "Amount", "Status", "Reason"]
                )
                
                # Search filter
                search_term = st.text_input("Search in data")
                
                # Apply search filter if provided
                if search_term:
                    filtered_explorer_df = df[df.astype(str).apply(lambda row: row.str.contains(search_term, case=False).any(), axis=1)]
                else:
                    filtered_explorer_df = df
                
                # Display selected columns
                if selected_columns:
                    st.dataframe(filtered_explorer_df[selected_columns], use_container_width=True)
                else:
                    st.dataframe(filtered_explorer_df, use_container_width=True)
                
                # Export options
                col1, col2 = st.columns(2)
                
                with col1:
                    if st.button("Export to CSV"):
                        csv = filtered_explorer_df.to_csv(index=False)
                        st.download_button(
                            label="Download CSV",
                            data=csv,
                            file_name="deductions_export.csv",
                            mime="text/csv"
                        )
                
                with col2:
                    if st.button("Export to Excel"):
                        output = BytesIO()
                        with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
                            filtered_explorer_df.to_excel(writer, sheet_name='Deductions', index=False)
                        
                        excel_data = output.getvalue()
                        st.download_button(
                            label="Download Excel",
                            data=excel_data,
                            file_name="deductions_export.xlsx",
                            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                        )
            
            with tab4:  # Insights Tab
                st.markdown("<h2 class='sub-title'>Insights</h2>", unsafe_allow_html=True)
                
                # Generate insights based on the data
                if not df.empty:
                    # Calculate key metrics
                    total_deductions = df["Amount"].sum()
                    failed_amount = df["Failed Amount"].sum()
                    failure_rate = (failed_amount / total_deductions) * 100 if total_deductions > 0 else 0
                    
                    # Top provider
                    top_provider_data = df.groupby("Provider")["Amount"].sum().reset_index().sort_values("Amount", ascending=False)
                    if not top_provider_data.empty:
                        top_provider = top_provider_data.iloc[0]["Provider"]
                        top_provider_amount = top_provider_data.iloc[0]["Amount"]
                    else:
                        top_provider = "Unknown"
                        top_provider_amount = 0
                    
                    # Top reason for failures
                    reason_counts = df["Reason"].value_counts()
                    if not reason_counts.empty:
                        top_reason = reason_counts.index[0]
                        top_reason_count = reason_counts.iloc[0]
                    else:
                        top_reason = "Unknown"
                        top_reason_count = 0
                    
                    # Display insights
                    st.markdown("<h3 class='sub-title'>Key Insights</h3>", unsafe_allow_html=True)
                    
                    insights = [
                        f"Total deduction amount is ${total_deductions:,.2f} with a failure rate of {failure_rate:.1f}%.",
                        f"{top_provider} is the top provider with ${top_provider_amount:,.2f} in deductions.",
                        f"The most common failure reason is '{top_reason}' with {top_reason_count} occurrences.",
                        f"There are {df['Employer'].nunique()} unique employers in the data."
                    ]
                    
                    for i, insight in enumerate(insights):
                        st.markdown(f"**{i + 1}. {insight}**")
                    
                    # Recommendations
                    st.markdown("<h3 class='sub-title'>Recommendations</h3>", unsafe_allow_html=True)
                    
                    recommendations = [
                        f"Focus on reducing '{top_reason}' failures to improve overall success rate.",
                        "Review automation processes for providers with high failure rates.",
                        "Consider additional monitoring for high-value deductions.",
                        "Implement proactive measures for employers with recurring issues."
                    ]
                    
                    for i, rec in enumerate(recommendations):
                        st.markdown(f"**{i + 1}. {rec}**")
                    
                    # Time-based analysis
                    st.markdown("<h3 class='sub-title'>Time-Based Analysis</h3>", unsafe_allow_html=True)
                    
                    # Day of week analysis
                    df['Day of Week'] = df['Deduction Submission Date'].dt.day_name()
                    day_order = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
                    df['Day of Week'] = pd.Categorical(df['Day of Week'], categories=day_order, ordered=True)
                    
                    day_counts = df.groupby('Day of Week')['Amount'].sum().reindex(day_order).reset_index()
                    
                    fig_day = px.bar(
                        day_counts,
                        x='Day of Week',
                        y='Amount',
                        title='Deduction Amount by Day of Week',
                        color='Amount',
                        color_continuous_scale=px.colors.sequential.Viridis
                    )
                    st.plotly_chart(fig_day, use_container_width=True)
                    
                    # Month analysis if data spans multiple months
                    if df['Deduction Submission Date'].dt.month.nunique() > 1:
                        df['Month'] = df['Deduction Submission Date'].dt.month_name()
                        month_order = ['January', 'February', 'March', 'April', 'May', 'June', 
                                      'July', 'August', 'September', 'October', 'November', 'December']
                        df['Month'] = pd.Categorical(df['Month'], categories=month_order, ordered=True)
                        
                        month_counts = df.groupby('Month')['Amount'].sum().reset_index()
                        
                        fig_month = px.line(
                            month_counts,
                            x='Month',
                            y='Amount',
                            title='Deduction Amount by Month',
                            markers=True,
                            color_discrete_sequence=[THEMES[st.session_state['theme']]["accent_color"]]
                        )
                        st.plotly_chart(fig_month, use_container_width=True)
                else:
                    st.warning("Not enough data to generate insights. Please adjust your filters.")
    
    except Exception as e:
        st.error(f"Error processing file: {str(e)}")
else:
    # Display instructions when no file is uploaded
    st.info("Please upload a Deductions Escalations report to begin analysis.")
    
    # Sample data structure
    st.markdown("<h3 class='sub-title'>Expected Data Format</h3>", unsafe_allow_html=True)
    
    # Create sample dataframe with the required columns
    sample_data = {
        "Environment": ["Production", "UAT"],
        "Deduction Submission Date": ["2025-05-01", "2025-05-02"],
        "BranchID": ["12345", "67890"],
        "Employer": ["ABC Corp", "XYZ Inc"],
        "DepartmentName": ["Finance", "HR"],
        "Pay Day": ["2025-05-15", "2025-05-16"],
        "Provider": ["Provider A", "Provider B"],
        "Method": ["ACH", "Wire"],
        "Transactions": [100, 50],
        "Amount": [10000.00, 5000.00],
        "Failed Amount": [500.00, 0.00],
        "Failed Department": ["Finance", ""],
        "Status": ["Partial Success", "Success"],
        "Escalated To": ["Team A", ""],
        "Successful via Automation": ["Yes", "Yes"],
        "Reason": ["Insufficient Funds", ""],
        "Remarks": ["Follow up required", ""],
        "Mode": ["Auto", "Manual"],
        "Task Link / Email Subject": ["Task #12345", "Email: May Deductions"]
    }
    
    sample_df = pd.DataFrame(sample_data)
    st.dataframe(sample_df, use_container_width=True)
